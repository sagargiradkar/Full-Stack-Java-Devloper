Yesterday topic of discussion
-----------------------------
1.OOPs(HAS-A part)
2.Identifier/Variables
    a.Rules of Identifier
        eg:1.a-z,A-Z,0-9,$,_
3.Reserve words / keyword
4.Datatype

Datatypes
------------
    Numeric Datatype
        a.whole number
            1.byte(1 byte)
            2.short(2 bytes)
            3.int(4 bytes) * commonly used datatype
            4.long(8 bytes)
        b.realnumber
            1.float
            2.double
float 
-----

public class Main {

	public static void main(String[] args) {
		System.out.println("Size of float is :"+Float.SIZE);
		System.out.println("MINVALUE of float is ::"+ Float.MIN_VALUE);
		System.out.println("MAXVALUE of float is ::"+ Float.MAX_VALUE);
	
		
	}

}
Size of float is :32(4 bytes) 1byte = 8 bits , 32/8 = 4 bytes
MINVALUE of float is ::1.4E-45
MAXVALUE of float is ::3.4028235E38

Note : By default if u specify any real number / decimal number compiler will treat it as "double",to specify
        to the compiler to treat it as float ,we need to suffix it with 'F' or 'f'
eg: float f =10.5f;	
	float fl =25.5f;	
    float a = 10.5 //CE:possible loss of precession 
Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	Type mismatch: cannot convert from double to float

	at Main.main(Main.java:51)


double
------

public class Main {

	public static void main(String[] args) {
		System.out.println("Size of Double is :"+Double.SIZE);
		System.out.println("MINVALUE of Double is ::"+ Double.MIN_VALUE);
		System.out.println("MAXVALUE of Double is ::"+ Double.MAX_VALUE);
	
		
	}

}

Size of Double is :64bits (1 byte = 8bit 64/8 = 8 bytes)
MINVALUE of Double is ::4.9E-324
MAXVALUE of Double is ::1.7976931348623157E308

eg: double d = 23.567
    double d = 1.7976931348623157E308

NOte: Datatypes are actually represented to the compiler and jv, using reserve words 
        reserve words are normally in "lower case".
      To map primitive data as Object in JAVA from JDK1.5 concept of "Wrapper class" was introduced.
            byte ----------> Byte(C)
            short----------> Short(C)
            int -----------> Integer(C)
            long ----------> Long(C)
            float ---------> Float(C)
            double --------> Double(C)

===============================================================
Primitive datatype
====================
======
char :
=======

Datatype :- Specific Formate :- store it into memmory in the form of 0,1 ->memmory

int ----> Base 2 -----> 

A B # @ 1 2                   ---------> Characters
---------------------------------------------------------------
char -> primitive datatype is used for storing the characteres 
---------------------------------------------------------------

A 0     
B 1

A 00
B 01
C 10
D 11

As number of character increase then the number of bits also increases to store the data into memmory 

128 character are discovered  ( ASCII )
A B C ------ X Y Z
a b c ------ x y z
1 2 3 ------ 7 8 9
~ ! @ ------ ^ & *

1 byte = 8 bit

     Binary Number 
     8 bit 
A -> 00000000
        UTF-16
IEEE => 65536 -> Characters / Symbols 

2^16 => 65536 => 16 bits => 2 byte

UTF -> unicode => 2 bytes of memmory allocated 

===> java -> utf -> 2 BYTES OF MEMMORY ALLOCATED 

ASCII -> Binary , Dec , Hex => 128

Unicode -> Binary , Decimal , Hexa => 65536 character

0 to 128 remains same 
A -> 65
B -> 66

a -> 97
b -> 98

Create a Table 
English 
Characters and there Decimal Values

===> JAVA => UNICODE => UTF
    char => 2 bytes

=> Syntax :- ' ' (Always write character in single Quotes Not Double Quotes)
        char a = 'A';
        char b = 'B';
        char c = 'AB'; // Not Valid
        char d = '!'; Valid 
Class For Character 
====> 
char => Character ===> Class 

char should be in small letters 

=> bytes ,short,int ,long,float,double,boolean,char
array,String => Objects

primitive => wrapper class => everything treated as Objects
------------------------------------------------------------

int a = 25; //Valid
int b = 2; //Valid
int c = a/b;
System.out.println(c);
12

float c = a/b; // 

Truncation / Rounding Zero
Truncated => Rounding to Zero 

====================================
Importance of code snipits 
        ---> more clearly 
============================================================================
==>    byte , short , int , long , float , double => Implicit typecasting ||
============================================================================
byte a = 45;
double b;
    b = a;  // 45

    byte num1 = 45;
		double num2;
				num2 = num1;
    (Type Casting / Numeric Promotion)

internaly automatically data will be changed automatically  --> Implicit typecasting
                                                            --> Numerica type Promotion
double a = 45.5;
byte b;
b = (BYTE) a; // TYPE CASTING 

#  .5555555 PRECISSION 

=======================
        OPERATORS
=======================                                                        
int a = 5 + 10;  => 15 

Incrementation (++)        ||        Decrementation (--)
int a = 5;  a = 5
a = a + 1 ;

int a = 5;
a--;

a = a - 1;

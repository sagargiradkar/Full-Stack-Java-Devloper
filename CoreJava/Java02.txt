Todays Topic of discussion 
===========================
1.OOPS(Basic introduction)
2.Identifier  / Variables
    a.rules to write an Identifier
3.Reserved Words
4.Data types and its types

Yesterday Topic of discussion
-----------------------------
1.JShell
2.MAin method(public static void main(String args[]))
3.command line arguments execution using IDE and command prompt.

======================================
                OOPS
======================================

Its stand for Object Orientation Principles.
Object -> real time instance or an entity.
    eg:Car,Student,Empoloyee,

Every object in realtime will have 2 parts
    What it has 
    what it does


eg: Car 
        brandName :
        no.of weels :
        model:
        speed:


        move 
        accelerate
        brake

JAva Code 
-----------
class Car
{
    //HAS part of an Object is representated as a "Variables"
        String brandName ;
        int noOfWeels;
       
    //DOES part of an object is representated though "methods"
        public void move()
        {
            //logic of moving a vehicle
        }

        public vaid accelerate()
        {
            //logic of accelerating a vehicle
        }
}


#2.
    class Student 
    {
        //HAS-part (variables)
        String name;
        int id;
        float heigth;

        //DOES-part (methods) 
        public void study(){
            //logic of studying
        }

        public void play()
        {
            //logic for play
        }
    }

variables/Identifier
--------------------
it is a name in java program.
it can be a classname,methodname,variable name and label name
class Main{
    public static void main (String[] args){
        int x=10;
    }
}

Totally 4 identifiers

eg#2.

class Test {
    public static void main (String[] args){
        System.out.println("Sagar");

    }
}

Totally 7 identifiers

eg#3

class Demo {
    public static void main(String[] args){
        String name="sagar";
        String resuly = name.toUpperCase();
        System.out.println(resuly);
    }
}

Rules(compiler + jvm) for writing an identifiers
----------------------------------
int #_$ = 10;

Rule1 : The only allowed characters in java identifiers arguments
        a to z ,A to Z ,0 to 9 , _ (underscore),$
Rule2 : If we used in any other characters it would result in
        int ^* =10 ;(invalid)
Rule3 : identifiers are not allowed to start with digits

        int 4telids = 100;(invalid)

Rule4 : Java identifiers are case sensitive,meaning nubmer and Number is different.
class Demo {
    int num;
    int nUm;
    int Sam;
}
Rule5 : There is no length limit on java identifiers ,but still it is a good practice to keep the 
        length of the identifier not more than 15 characters.

int priorityOfThreadWithMinValue = 1;

Reserved Words
---------------
if 
while
for 
else
String
try
catch
throws
assert
true
false
True
False

Rule6: We cant use Reserved words as a identifier
        eg : int if = 10 ;//compiler Error



Rule7:Predefined classnames can be used as identifier
    eg#1
        String Runnable = "Sagar"
        System.out.println(Runnable)
    eg#2
        int String = 10;
        System.out.println(String); // 10
NOTE : Even through Predefined classNames can be used as an identifiers,it is not good practise to keeo.

String --------------> inbuilt classname
Runnable ------------> inbuilt interface
Student -------------> Costomize/UserDefined classname

ReservedWords
-------------
It is a built in words/keywords which has already predefined meaning to it

Note : Literals any constant value which can be assigned to a variable is called Literals   
        int data = 10;
            Literals -> 10
Note : for boolean datatypes the only values allowed for a variables is "true,false",other than this is we are try to keep any values it 
        result in "CompilerTimeOutError".
        => All reserveWord names would start with "lower case".
        => In Java all ClassNames/Interface Names would start with "upperCase".


Which of the list contain only reserve words ?
        1.final,finally,finalize
        ans.finalize is not a reserveWord ,it is a method in Object class.

        2.break,contineu,return.exit
        ans.exit is not a reserve word,it is a method in System class

        3.byte ,short,Integer,long
        ans.Integer is not a reserve word ,it is a predefined class

        4.throw,throws,thrown
        ans.thrown is not a reserve word,it is a UserDefined variable


Datatypes 
----------

Variable/identifier
reserveWords/builtinWord/keywords

Every variable has a types,every expression has a types and all types are strictly typed / define in Java
bz java is strictly type /statically typed language

    compiler role -> Compiler will check the value stored can be handled by datatype or not
    This checking which is done by compiler is called "TypeChecking/Strictlytype checking".

    int data = 10;
    boolean result = true;


        int data = 10;
        int a=10;
        int b=20;
        int result=a*b;

Primitive datatypes (data which is commonly used)
=======================================================
meaning -> data which is commonly used and supported by language to store directly
=======================================================
    a.Numeric values
            =>to store Number  
                a.whole number (Integer data types) ->1.byte 2.short 3.int 4.
                b.realnumber (Floating point data types)
    b.character value
        =>to store character type data
    c.boolean values
        =>to store logical value

Number Data 
===========
To store whole numbers we have 4 datatype
    a.byte
    b.short
    c.int
    d.long 
datatype information like
    a.size of datatype(how much memmory is allocated on the ram for that datatype by JVM)
    b.minvalue what it can keep
    c.maxvalue what it can keep
Note :
	    // TODO Auto-generated method stub
		System.out.println("Size od byte is :"+Byte.SIZE);
		System.out.println("MINVALUE of byte is ::"+ Byte.MIN_VALUE);
		System.out.println("MAXVALUE of byte is ::"+ Byte.MAX_VALUE);
Byte:
    Size od byte is :8
    MINVALUE of byte is ::-128
    MAXVALUE of byte is ::127

    size->8 bit
    minValue->-128
    maxvalue->127

    marks=35 // valid
    byte marks = 135; // CE: Possible loss of precision 
                        found :int
                        required:byte

    byte a = true;// CE:incompatible types
    byte b = "Sagar"; //CE:incompatible types

when to used byte datatype ?
    it is commonly used when we handled the data which is comming from stream , network.
    stream -> java.io package
"" -> means String Data 
'' -> char data 



short 
		// TODO Auto-generated method stub
		System.out.println("Size od byte is :"+Short.SIZE);
		System.out.println("MINVALUE of byte is ::"+ Short.MIN_VALUE);
		System.out.println("MAXVALUE of byte is ::"+ Short.MAX_VALUE);

        Size of byte is : 16 bits (2 byte)
        MINVALUE of byte is :: - 32768
        MAXVALUE of byte is :: + 32767

        short data = 137; // valid
        short data = true;//CE:incompatible types
        short data = "sagar";//CE : incompatible type

        Note : This data is not at all used in java and this data type is best suited only if u have old processor like 8086.


public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		short s = 32768;	
	}
}


Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	Type mismatch: cannot convert from int to short

	at Main.main(Main.java:22)
============
||  int   ||
============

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Size od int is :"+Integer.SIZE);
		System.out.println("MINVALUE of int is ::"+ Integer.MIN_VALUE);
		System.out.println("MAXVALUE of int is ::"+ Integer.MAX_VALUE);
	}

}

Size of int is :32 bits (4 bytes)
MINVALUE of int is ::-2147483648
MAXVALUE of int is ::2147483647

eg : int data = 323445;
     int result = true;//CE :incompatible types
     int result = "Pass"; // CE:incompatible types

Note : The most commonly Used datatype for storing whole number is "int" only and by default if we specify any literal of
        number type compiler will try to keep it as "int" only ,but we can keep either in short or byte also

long :
when int is not enough to hold the big values, then we used long data type.
    When we work with large files,data would come to java program in tyerms of GB's

        long size = file.length();
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Size of long is :"+Long.SIZE);
		System.out.println("MINVALUE of long is ::"+ Long.MIN_VALUE);
		System.out.println("MAXVALUE of long is ::"+ Long.MAX_VALUE);
	}

}

Size of long is :: 64 (8 bytes)
MINVALUE of long is ::-9223372036854775808
MAXVALUE of long is ::9223372036854775807

eg : long data = 10;
     long data = 9223372036854775807;

     long data = 10L; // now also no problem bz 10 is and we have added 'L' 
	 long number = 5l;
     if the data goes beyond the range of int ,then to keep the data inside long data type we need to explicitly suffix the 
     data with "L" or 'l' otherwise it could result in "CompileTimeError".



